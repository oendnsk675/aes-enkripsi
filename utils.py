import numpy as np
import openpyxl
from openpyxl.styles import Border, Side
import os


def add_round_key(plain_tmp, key):
    # Menambahkan kunci utama ke blok teks menggunakan operasi XOR
    for i in range(4):
        for j in range(4):
            p = int(plain_tmp[j][i], 16) if isinstance(plain_tmp[j][i], str) else plain_tmp[j][i]
            k = int(key[j][i], 16) if isinstance(key[j][i], str) else key[j][i]
            plain_tmp[j][i] = p ^ k

    return [[hex(num) for num in row] for row in plain_tmp]


def sub_bytes(matrix):
    # print(matrix)
    # print()
    # Membuat tabel SubBytes
    sub_bytes_table = [
        ['0x63', '0x7C', '0x77', '0x7B', '0xF2', '0x6B', '0x6F', '0xC5', '0x30', '0x01', '0x67', '0x2B', '0xFE', '0xD7', '0xAB', '0x76'],
        ['0xCA', '0x82', '0xC9', '0x7D', '0xFA', '0x59', '0x47', '0xF0', '0xAD', '0xD4', '0xA2', '0xAF', '0x9C', '0xA4', '0x72', '0xC0'],
        ['0xB7', '0xFD', '0x93', '0x26', '0x36', '0x3F', '0xF7', '0xCC', '0x34', '0xA5', '0xE5', '0xF1', '0x71', '0xD8', '0x31', '0x15'],
        ['0x04', '0xC7', '0x23', '0xC3', '0x18', '0x96', '0x05', '0x9A', '0x07', '0x12', '0x80', '0xE2', '0xEB', '0x27', '0xB2', '0x75'],
        ['0x09', '0x83', '0x2C', '0x1A', '0x1B', '0x6E', '0x5A', '0xA0', '0x52', '0x3B', '0xD6', '0xB3', '0x29', '0xE3', '0x2F', '0x84'],
        ['0x53', '0xD1', '0x00', '0xED', '0x20', '0xFC', '0xB1', '0x5B', '0x6A', '0xCB', '0xBE', '0x39', '0x4A', '0x4C', '0x58', '0xCF'],
        ['0xD0', '0xEF', '0xAA', '0xFB', '0x43', '0x4D', '0x33', '0x85', '0x45', '0xF9', '0x02', '0x7F', '0x50', '0x3C', '0x9F', '0xA8'],
        ['0x51', '0xA3', '0x40', '0x8F', '0x92', '0x9D', '0x38', '0xF5', '0xBC', '0xB6', '0xDA', '0x21', '0x10', '0xFF', '0xF3', '0xD2'],
        ['0xCD', '0x0C', '0x13', '0xEC', '0x5F', '0x97', '0x44', '0x17', '0xC4', '0xA7', '0x7E', '0x3D', '0x64', '0x5D', '0x19', '0x73'],
        ['0x60', '0x81', '0x4F', '0xDC', '0x22', '0x2A', '0x90', '0x88', '0x46', '0xEE', '0xB8', '0x14', '0xDE', '0x5E', '0x0B', '0xDB'],
        ['0xE0', '0x32', '0x3A', '0x0A', '0x49', '0x06', '0x24', '0x5C', '0xC2', '0xD3', '0xAC', '0x62', '0x91', '0x95', '0xE4', '0x79'],
        ['0xE7', '0xC8', '0x37', '0x6D', '0x8D', '0xD5', '0x4E', '0xA9', '0x6C', '0x56', '0xF4', '0xEA', '0x65', '0x7A', '0xAE', '0x08'],
        ['0xBA', '0x78', '0x25', '0x2E', '0x1C', '0xA6', '0xB4', '0xC6', '0xE8', '0xDD', '0x74', '0x1F', '0x4B', '0xBD', '0x8B', '0x8A'],
        ['0x70', '0x3E', '0xB5', '0x66', '0x48', '0x03', '0xF6', '0x0E', '0x61', '0x35', '0x57', '0xB9', '0x86', '0xC1', '0x1D', '0x9E'],
        ['0xE1', '0xF8', '0x98', '0x11', '0x69', '0xD9', '0x8E', '0x94', '0x9B', '0x1E', '0x87', '0xE9', '0xCE', '0x55', '0x28', '0xDF'],
        ['0x8C', '0xA1', '0x89', '0x0D', '0xBF', '0xE6', '0x42', '0x68', '0x41', '0x99', '0x2D', '0x0F', '0xB0', '0x54', '0xBB', '0x16']
    ]

    # Mengganti setiap elemen matriks dengan substitusi dari tabel SubBytes
    substituted_matrix = [[sub_bytes_table[int(byte, 16) >> 4][int(byte, 16) & 0x0F] for byte in row] for row in matrix]

    return substituted_matrix

def shift_rows(data):
    # Tahap ShiftRows
    shifted_result = []
    for i, row in enumerate(data):
        shifted_row = row[i:] + row[:i]
        shifted_result.append(shifted_row)
    return shifted_result

# print(shift_rows_r)

def mix_columns(matrix):
    # Matriks konstanta MixColumns
    constant_matrix = [
        [0x02, 0x03, 0x01, 0x01],
        [0x01, 0x02, 0x03, 0x01],
        [0x01, 0x01, 0x02, 0x03],
        [0x03, 0x01, 0x01, 0x02]
    ]

    # Mengubah nilai heksadesimal menjadi bilangan bulat
    matrix = [[int(byte, 16) for byte in row] for row in matrix]

    # Membuat matriks hasil
    result_matrix = [[0 for _ in range(len(matrix[0]))] for _ in range(len(matrix))]

    # Melakukan operasi MixColumns
    for col in range(len(matrix[0])):
        for row in range(len(matrix)):
            result = 0
            for i in range(len(matrix[0])):
                result ^= galois_multiply(matrix[i][col], constant_matrix[row][i])

            # Mengatasi nilai yang overflow
            result %= 256

            # Mengubah hasil menjadi nilai heksadesimal
            result_matrix[row][col] = hex(result)

    return result_matrix

# Fungsi untuk mengalikan dua bilangan dalam Galois Field dengan penanganan overflow
def galois_multiply(a, b):
    p = 0
    for _ in range(8):
        if b & 1:
            p ^= a
        carry = a & 0x80
        a <<= 1
        if carry:
            a ^= 0x1B
        b >>= 1

        # Mengatasi nilai yang overflow
        a &= 0xFF

    return p


def sub_bytes_k(byte):
    # Melakukan operasi SubBytes dengan tabel substitusi
    substitution_table = [
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
    ]

    # Melakukan operasi SubBytes dengan tabel substitusi
    return substitution_table[byte]

def key_schedule(key):
    # Membuat array konstanta round
    rcon = [
        [0x01, 0x00, 0x00, 0x00],
        [0x02, 0x00, 0x00, 0x00],
        [0x04, 0x00, 0x00, 0x00],
        [0x08, 0x00, 0x00, 0x00],
        [0x10, 0x00, 0x00, 0x00],
        [0x20, 0x00, 0x00, 0x00],
        [0x40, 0x00, 0x00, 0x00],
        [0x80, 0x00, 0x00, 0x00],
        [0x1b, 0x00, 0x00, 0x00],
        [0x36, 0x00, 0x00, 0x00]
    ]

    # Jumlah round yang diperlukan berdasarkan ukuran key
    num_rounds = len(key) + 6
    
    # Membuat key schedule awal dengan key asli
    key_schedule = [key]
    # print(key_schedule);
    # exit()

    # Iterasi untuk membuat key schedule
    for round in range(num_rounds):
        # Mengambil kolom terakhir dari key schedule
        last_column = [row[-1] for row in key_schedule[round]]

        # Melakukan operasi ShiftRows pada last_column
        last_column = last_column[1:] + [last_column[0]]


        # Melakukan operasi SubBytes pada last_column
        last_column = [sub_bytes_k(byte) for byte in last_column]


        # Melakukan operasi XOR dengan konstanta round pada last_column
        last_column = [b ^ rc for b, rc in zip(last_column, rcon[round % len(rcon)])]

        
        # Melakukan operasi XOR dengan column ke round
        new_column = [key_schedule[round][i][0] ^ last_column[i] for i in range(len(key_schedule[round]))]
        new_column = [[new_column[i], 0, 0, 0] for i in range(len(new_column))]

        # Menambahkan last_column ke key schedule
        key_schedule = key_schedule + [new_column]


        # Menerapkan operasi XOR dengan key sebelumnya pada key schedule
        for i in range(1, 4):
            for j in range(0, 4):
                key_schedule[round+1][j][i] = key_schedule[round][j][i] ^ key_schedule[round+1][j][i-1]

    return [[[hex(num) for num in row] for row in ks] for ks in key_schedule]


def draw_table(row=1, col=1, value=None, filename='test.xlsx', border_none = True):
    # Membuat workbook baru
    # Memeriksa apakah file ada
    if os.path.exists(filename):
        workbook = openpyxl.load_workbook(filename)
    else:
        workbook = openpyxl.Workbook()
    

    # Membuat worksheet baru
    worksheet = workbook.active

    # Membuat style border
    border = Border(left=Side(border_style="thin"), 
                    right=Side(border_style="thin"), 
                    top=Side(border_style="thin"), 
                    bottom=Side(border_style="thin"))

    if border_none == True:
        worksheet.cell(row=row, column=col, value=value).border = border
    else:
        worksheet.cell(row=row, column=col, value=value)

    workbook.save(filename)
    pass
